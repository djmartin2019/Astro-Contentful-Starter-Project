---
import Base from '../../layouts/Base.astro';
import { getBlogPosts, getAssetUrl } from '../../lib/contentful';
import { generateBreadcrumbStructuredData } from '../../lib/seo';
import type { BlogPost } from '../../types/contentful';

export async function getStaticPaths() {
  try {
    const postsResponse = await getBlogPosts({ limit: 1000 });
    // Filter posts to ensure they have the required structure
    const validPosts = (postsResponse.items || [])
      .filter((post: any) => post?.sys?.type === 'Entry' && post?.fields && post.fields.title && post.fields.slug);
    
    return validPosts.map((post: BlogPost) => ({
      params: { slug: post.fields.slug },
      props: { post },
    }));
  } catch (error) {
    console.error('Error generating static paths for blog posts:', error);
    return [];
  }
}

export interface Props {
  post: BlogPost;
}

const { post } = Astro.props;

// Resolve the featured image using simple image URL creation
let featuredImageResolved = null;
if (post?.fields?.featuredImage?.sys?.id) {
  featuredImageResolved = {
    sys: { id: post.fields.featuredImage.sys.id, type: 'Asset' },
    fields: { title: `${post.fields.featuredImage.sys.id} Image` }
  };
}

// Generate SEO metadata
const seoTitle = post.fields.title;
const seoDescription = post.fields.excerpt || `Read ${post.fields.title}`;
const featuredImage = featuredImageResolved ? getAssetUrl(featuredImageResolved, 1200, 630) : undefined;

// Calculate reading time and word count (placeholder - in real implementation, parse rich text)
const wordCount = Math.max(300, Math.floor((post.fields.excerpt?.length || 0) * 2.5));
const readingTime = Math.max(1, Math.ceil(wordCount / 200)); // 200 words per minute

// Get category from tags (use first tag as category)
const category = post.fields.tags?.[0] || 'General';

// Generate breadcrumb structured data
const breadcrumbItems = [
  { name: 'Home', url: Astro.url.origin },
  { name: 'Blog', url: `${Astro.url.origin}/blog` },
  { name: post.fields.title, url: Astro.url.href }
];
const breadcrumbStructuredData = generateBreadcrumbStructuredData(breadcrumbItems);

// Get related posts
let relatedPosts: BlogPost[] = [];
try {
  if (post?.fields?.tags && post.fields.tags.length > 0) {
    const relatedResponse = await getBlogPosts({
      'fields.tags[in]': post.fields.tags[0],
      limit: 3,
    });
    // Filter related posts to ensure they have the required structure
    relatedPosts = (relatedResponse.items || [])
      .filter((p: any) => p?.sys?.type === 'Entry' && p?.fields && p.fields.title && p.fields.slug && p.sys.id !== post.sys.id);
  }
} catch (error) {
  console.error('Error fetching related posts:', error);
}
---

<Base 
  title={seoTitle}
  description={seoDescription}
  image={featuredImage}
  type="article"
  publishedTime={post.fields.publishDate}
  modifiedTime={post.sys.updatedAt || post.fields.publishDate}
  author={post.fields.author}
  tags={post.fields.tags}
  readingTime={readingTime}
  wordCount={wordCount}
  category={category}
>
  <!-- Breadcrumb Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbStructuredData)} />

  <article class="bg-white">
    <!-- Breadcrumb Navigation -->
    <nav class="bg-gray-50 border-b border-gray-200" aria-label="Breadcrumb">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <ol class="flex items-center space-x-2 text-sm">
          <li>
            <a href="/" class="text-gray-500 hover:text-gray-700 transition-colors">Home</a>
          </li>
          <li>
            <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
          </li>
          <li>
            <a href="/blog" class="text-gray-500 hover:text-gray-700 transition-colors">Blog</a>
          </li>
          <li>
            <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
          </li>
          <li>
            <span class="text-gray-900 font-medium" aria-current="page">
              {post.fields.title}
            </span>
          </li>
        </ol>
      </div>
    </nav>

    <!-- Blog Post Header -->
    <section class="bg-gradient-to-r from-primary-600 to-primary-700 text-white py-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h1 class="text-4xl md:text-5xl font-bold mb-4">
          {post?.fields?.title ?? '(Untitled)'}
        </h1>
        {post?.fields?.excerpt && (
          <p class="text-xl text-primary-100 max-w-3xl mx-auto">
            {post.fields.excerpt}
          </p>
        )}
      </div>
    </section>

    <!-- Featured Image -->
    <section class="py-8">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <img 
          src="https://images.unsplash.com/photo-1555066931-4365d14bab8c?q=80&w=1920&h=600&auto=format&fit=crop"
          alt={post?.fields?.title ?? 'Blog post image'}
          class="w-full h-64 md:h-96 object-cover rounded-lg shadow-lg"
          loading="lazy"
          decoding="async"
        />
      </div>
    </section>

    <!-- Blog Post Content -->
    <section class="py-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Post Meta -->
        <div class="mb-8 pb-4 border-b">
          <!-- Author, Date, and Reading Time -->
          <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500 mb-4">
            {post?.fields?.author && (
              <span class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                {post.fields.author}
              </span>
            )}
            {post?.fields?.publishDate && (
              <span class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a4 4 0 118 0v4m-4 0a4 4 0 00-4 4v6a4 4 0 004 4h8a4 4 0 004-4v-6a4 4 0 00-4-4z" />
                </svg>
                {new Date(post.fields.publishDate).toLocaleDateString()}
              </span>
            )}
            <span class="flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              {readingTime} min read
            </span>
            <span class="flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              {wordCount} words
            </span>
          </div>
          
          <!-- Tags -->
          {post?.fields?.tags && post.fields.tags.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {post.fields.tags.map((tag: string) => (
                <span class="px-3 py-1 bg-primary-100 text-primary-800 text-xs rounded-full whitespace-nowrap">
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>

        <!-- Content -->
        <div class="prose prose-lg prose-primary max-w-none">
          <!-- This is where you would render the rich text content -->
          <div class="bg-gray-50 border-l-4 border-primary-500 p-4 mb-8">
            <p class="text-gray-700">
              <strong>Note:</strong> This is a placeholder for the rich text content. 
              In a real implementation, you would render the Contentful Rich Text field here 
              using a library like <code>@contentful/rich-text-react-renderer</code> or similar.
            </p>
          </div>
          
          <p>
            This blog post demonstrates how to create dynamic blog posts using Contentful's content models. 
            You can create any type of blog content and it will be automatically generated.
          </p>
        </div>
      </div>
    </section>

    <!-- Related Posts -->
    {relatedPosts.length > 0 && (
      <section class="py-16 bg-gray-50">
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-3xl font-bold text-gray-900 mb-8">Related Posts</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            {relatedPosts.map((relatedPost: BlogPost) => (
              <article class="bg-white rounded-lg shadow-md overflow-hidden">
                <img 
                  src="https://images.unsplash.com/photo-1555066931-4365d14bab8c?q=80&w=400&h=225&auto=format&fit=crop"
                  alt={relatedPost?.fields?.title ?? 'Related post image'}
                  class="w-full h-48 object-cover"
                  loading="lazy"
                  decoding="async"
                />
                <div class="p-6">
                  <h3 class="text-xl font-semibold text-gray-900 mb-2">
                    <a href={`/blog/${relatedPost?.fields?.slug}`} class="hover:text-primary-600 transition-colors">
                      {relatedPost?.fields?.title ?? '(Untitled)'}
                    </a>
                  </h3>
                  {relatedPost?.fields?.excerpt && (
                    <p class="text-gray-600 text-sm line-clamp-3">
                      {relatedPost.fields.excerpt}
                    </p>
                  )}
                </div>
              </article>
            ))}
          </div>
        </div>
      </section>
    )}

    <!-- Back to Blog -->
    <section class="py-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <a 
          href="/blog"
          class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 transition-colors"
        >
          <svg class="mr-2 -ml-1 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to Blog
        </a>
      </div>
    </section>
  </article>
</Base>

<style>
  /* Custom styles for the blog post */
  .rich-text-content h2 {
    @apply text-2xl font-bold text-gray-900 mt-8 mb-4;
  }
  
  .rich-text-content h3 {
    @apply text-xl font-semibold text-gray-900 mt-6 mb-3;
  }
  
  .rich-text-content p {
    @apply text-gray-700 mb-4 leading-relaxed;
  }
  
  .rich-text-content ul, .rich-text-content ol {
    @apply mb-4 pl-6;
  }
  
  .rich-text-content li {
    @apply text-gray-700 mb-2;
  }
  
  .rich-text-content blockquote {
    @apply border-l-4 border-primary-500 pl-4 py-2 my-6 bg-primary-50;
  }
  
  .rich-text-content blockquote p {
    @apply text-gray-700 italic mb-0;
  }
  
  .rich-text-content code {
    @apply bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm font-mono;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
