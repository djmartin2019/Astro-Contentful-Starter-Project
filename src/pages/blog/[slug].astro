---
import Base from '../../layouts/Base.astro';
import { getBlogPostBySlug, getBlogPosts } from '../../lib/contentful';
import { formatDate, getAssetUrl } from '../../lib/contentful';

export async function getStaticPaths() {
  try {
    const postsResponse = await getBlogPosts({ limit: 1000 });
    return postsResponse.items.map((post: any) => ({
      params: { slug: post.fields.slug },
      props: { post },
    }));
  } catch (error) {
    console.error('Error generating static paths:', error);
    return [];
  }
}

export interface Props {
  post: any;
}

const { post } = Astro.props;

// Get related posts (same tags, excluding current post)
let relatedPosts: any[] = [];
try {
  if (post.fields.tags && post.fields.tags.length > 0) {
    const relatedResponse = await getBlogPosts({
      'fields.tags[in]': post.fields.tags[0],
      limit: 3,
    });
    relatedPosts = relatedResponse.items
      .filter((relatedPost: any) => relatedPost.sys.id !== post.sys.id)
      .slice(0, 3);
  }
} catch (error) {
  console.error('Error fetching related posts:', error);
}

// Generate SEO metadata
const seoTitle = post.fields.seoTitle || post.fields.title;
const seoDescription = post.fields.seoDescription || post.fields.excerpt || 'Read this blog post';
const featuredImage = post.fields.featuredImage ? getAssetUrl(post.fields.featuredImage, 1200, 630) : undefined;
---

<Base 
  title={seoTitle}
  description={seoDescription}
  image={featuredImage}
  type="article"
  publishedTime={post.fields.publishDate}
  modifiedTime={post.sys.updatedAt}
  author={post.fields.author}
  tags={post.fields.tags}
>
  <article class="bg-white">
    <!-- Hero Section -->
    <section class="relative">
      {post.fields.featuredImage && (
        <div class="absolute inset-0">
          <img
            src={getAssetUrl(post.fields.featuredImage, 1920, 600)}
            alt={post.fields.featuredImage.fields.title || post.fields.title}
            class="w-full h-full object-cover"
          />
          <div class="absolute inset-0 bg-black bg-opacity-40"></div>
        </div>
      )}
      
      <div class="relative max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-20 text-center">
        <div class="bg-white bg-opacity-95 backdrop-blur-sm rounded-lg p-8 shadow-xl">
          <h1 class="text-3xl md:text-5xl font-bold text-gray-900 mb-4">
            {post.fields.title}
          </h1>
          
          {post.fields.excerpt && (
            <p class="text-xl text-gray-600 mb-6 max-w-3xl mx-auto">
              {post.fields.excerpt}
            </p>
          )}
          
          <div class="flex flex-col sm:flex-row items-center justify-center gap-4 text-sm text-gray-500">
            <time datetime={post.fields.publishDate}>
              {formatDate(post.fields.publishDate)}
            </time>
            {post.fields.author && (
              <>
                <span class="hidden sm:inline">•</span>
                <span>By {post.fields.author}</span>
              </>
            )}
            {post.fields.tags && post.fields.tags.length > 0 && (
              <>
                <span class="hidden sm:inline">•</span>
                <div class="flex gap-2">
                  {post.fields.tags.map((tag: string) => (
                    <span class="bg-primary-100 text-primary-700 px-2 py-1 rounded-full text-xs">
                      {tag}
                    </span>
                  ))}
                </div>
              </>
            )}
          </div>
        </div>
      </div>
    </section>

    <!-- Content Section -->
    <section class="py-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="prose prose-lg prose-primary max-w-none">
          <!-- Rich Text Content -->
          {post.fields.content && (
            <div class="rich-text-content">
              <!-- This is where you would render the rich text content -->
              <!-- For now, we'll show a placeholder -->
              <div class="bg-gray-50 border-l-4 border-primary-500 p-4 mb-8">
                <p class="text-gray-700">
                  <strong>Note:</strong> This is a placeholder for the rich text content. 
                  In a real implementation, you would render the Contentful Rich Text field here 
                  using a library like <code>@contentful/rich-text-react-renderer</code> or similar.
                </p>
                <p class="text-gray-600 mt-2">
                  The content would include headings, paragraphs, lists, links, and other rich text elements.
                </p>
              </div>
              
              <!-- Sample content structure -->
              <h2>Sample Content Structure</h2>
              <p>
                This blog post demonstrates how to structure content using Contentful's content models. 
                The content includes various elements like headings, paragraphs, and formatting.
              </p>
              
              <h3>Key Features</h3>
              <ul>
                <li>Rich text content with formatting</li>
                <li>Featured images with optimization</li>
                <li>SEO metadata and structured data</li>
                <li>Tag-based categorization</li>
                <li>Author information</li>
                <li>Publish dates and timestamps</li>
              </ul>
              
              <h3>Implementation Notes</h3>
              <p>
                To properly render the rich text content from Contentful, you'll need to:
              </p>
              <ol>
                <li>Install a rich text renderer package</li>
                <li>Parse the JSON content from Contentful</li>
                <li>Map content types to appropriate HTML elements</li>
                <li>Handle embedded assets and entries</li>
              </ol>
              
              <blockquote>
                <p>
                  "Contentful's rich text fields provide a powerful way to create structured, 
                  flexible content that can be easily managed by content editors."
                </p>
              </blockquote>
            </div>
          )}
        </div>
      </div>
    </section>

    <!-- Related Posts -->
    {relatedPosts.length > 0 && (
      <section class="py-16 bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-3xl font-bold text-gray-900 mb-8 text-center">
            Related Posts
          </h2>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            {relatedPosts.map((relatedPost) => (
              <article class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                {relatedPost.fields.featuredImage && (
                  <img
                    src={getAssetUrl(relatedPost.fields.featuredImage, 400, 225)}
                    alt={relatedPost.fields.featuredImage.fields.title || relatedPost.fields.title}
                    class="w-full h-48 object-cover"
                  />
                )}
                <div class="p-6">
                  <div class="text-sm text-gray-500 mb-2">
                    <time datetime={relatedPost.fields.publishDate}>
                      {formatDate(relatedPost.fields.publishDate)}
                    </time>
                  </div>
                  <h3 class="text-lg font-semibold text-gray-900 mb-2">
                    <a href={`/blog/${relatedPost.fields.slug}`} class="hover:text-primary-600 transition-colors">
                      {relatedPost.fields.title}
                    </a>
                  </h3>
                  {relatedPost.fields.excerpt && (
                    <p class="text-gray-600 mb-4 line-clamp-3">
                      {relatedPost.fields.excerpt}
                    </p>
                  )}
                  <a 
                    href={`/blog/${relatedPost.fields.slug}`}
                    class="text-primary-600 hover:text-primary-700 font-medium transition-colors"
                  >
                    Read more →
                  </a>
                </div>
              </article>
            ))}
          </div>
        </div>
      </section>
    )}

    <!-- Back to Blog -->
    <section class="py-16 bg-white">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <a 
          href="/blog"
          class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 transition-colors"
        >
          <svg class="mr-2 -ml-1 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to Blog
        </a>
      </div>
    </section>
  </article>
</Base>

<style>
  /* Custom styles for the blog post */
  .rich-text-content h2 {
    @apply text-2xl font-bold text-gray-900 mt-8 mb-4;
  }
  
  .rich-text-content h3 {
    @apply text-xl font-semibold text-gray-900 mt-6 mb-3;
  }
  
  .rich-text-content p {
    @apply text-gray-700 mb-4 leading-relaxed;
  }
  
  .rich-text-content ul, .rich-text-content ol {
    @apply mb-4 pl-6;
  }
  
  .rich-text-content li {
    @apply text-gray-700 mb-2;
  }
  
  .rich-text-content blockquote {
    @apply border-l-4 border-primary-500 pl-4 py-2 my-6 bg-primary-50;
  }
  
  .rich-text-content blockquote p {
    @apply text-gray-700 italic mb-0;
  }
  
  .rich-text-content code {
    @apply bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm font-mono;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
