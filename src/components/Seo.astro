---
export interface Props {
  title: string;
  description?: string;
  image?: string;
  canonical?: string;
  noindex?: boolean;
  type?: string;
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  tags?: string[];
  readingTime?: number;
  wordCount?: number;
  category?: string;
}

const { 
  title, 
  description, 
  image, 
  canonical, 
  noindex = false,
  type = "website",
  publishedTime,
  modifiedTime,
  author,
  tags,
  readingTime,
  wordCount,
  category
} = Astro.props;

// Default meta description
const metaDescription = description || "A modern website built with Astro and Contentful CMS";
const metaImage = image || "/favicon.svg";
const canonicalUrl = canonical || Astro.url.href;

// Generate enhanced structured data
const baseStructuredData = {
  "@context": "https://schema.org",
  "@type": type === "article" ? "Article" : "WebPage",
  "headline": title,
  "description": metaDescription,
  "image": metaImage,
  "url": canonicalUrl,
  "inLanguage": "en-US",
  "isAccessibleForFree": true,
};

const articleStructuredData = type === "article" ? {
  ...baseStructuredData,
  "@type": "Article",
  "author": author ? {
    "@type": "Person",
    "name": author
  } : undefined,
  "publisher": {
    "@type": "Organization",
    "name": "Your Company",
    "logo": {
      "@type": "ImageObject",
      "url": `${Astro.url.origin}/favicon.svg`
    }
  },
  "datePublished": publishedTime,
  "dateModified": modifiedTime || publishedTime,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalUrl
  },
  "keywords": tags?.join(", "),
  "articleSection": category,
  "wordCount": wordCount,
  "timeRequired": readingTime ? `PT${readingTime}M` : undefined,
  "genre": "Technology",
  "about": tags?.map(tag => ({
    "@type": "Thing",
    "name": tag
  }))
} : baseStructuredData;

const websiteStructuredData = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": "Your Company",
  "description": "A modern website built with Astro and Contentful CMS",
  "url": Astro.url.origin,
  "potentialAction": {
    "@type": "SearchAction",
    "target": `${Astro.url.origin}/blog?tag={search_term_string}`,
    "query-input": "required name=search_term_string"
  }
};
---

<!-- Enhanced Meta Tags -->
<meta name="generator" content="Astro" />
<meta name="theme-color" content="#3b82f6" />
<meta name="msapplication-TileColor" content="#3b82f6" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalUrl} />

<!-- Robots meta -->
{noindex ? (
  <meta name="robots" content="noindex, nofollow" />
) : (
  <meta name="robots" content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" />
)}

<!-- Article-specific meta tags -->
{type === "article" && (
  <>
    <meta name="article:author" content={author} />
    <meta name="article:published_time" content={publishedTime} />
    <meta name="article:modified_time" content={modifiedTime || publishedTime} />
    {tags && tags.map(tag => (
      <meta name="article:tag" content={tag} />
    ))}
    {category && <meta name="article:section" content={category} />}
    {readingTime && <meta name="twitter:label1" content="Reading time" />}
    {readingTime && <meta name="twitter:data1" content={`${readingTime} min read`} />}
  </>
)}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:title" content={title} />
<meta property="og:description" content={metaDescription} />
<meta property="og:image" content={new URL(metaImage, Astro.url)} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content={title} />
<meta property="og:site_name" content="Your Company" />
<meta property="og:locale" content="en_US" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalUrl} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={metaDescription} />
<meta property="twitter:image" content={new URL(metaImage, Astro.url)} />
<meta property="twitter:image:alt" content={title} />
{author && <meta property="twitter:creator" content={`@${author.toLowerCase().replace(/\s+/g, '')}`} />}

<!-- Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(articleStructuredData)} />
{type !== "article" && <script type="application/ld+json" set:html={JSON.stringify(websiteStructuredData)} />}
